{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://DQS/./src/code/autoImp.ext.ts","webpack://DQS/./src/code/sort.ext.ts","webpack://DQS/external commonjs \"vscode\"","webpack://DQS/external node-commonjs \"fs\"","webpack://DQS/webpack/bootstrap","webpack://DQS/./src/extension.ts"],"sourcesContent":["import * as vscode from \"vscode\";\n\nconst autoImp = vscode.commands.registerCommand(\"dqs.imp\", () => {\n  const currentEditor = vscode.window.activeTextEditor;\n  if (!currentEditor) {\n    return;\n  }\n  const reg = /(\\S+)(\\.imp)$/;\n  const { selection, document } = currentEditor;\n  const position = document.getWordRangeAtPosition(selection.anchor, reg);\n  if (!position) {\n    return vscode.window.showInformationMessage(\n      \"您应该输入这种格式: xxx.imp\"\n    );\n  }\n\n  const docText = document.getText(position);\n  const tempArr = reg.exec(docText);\n  const prefix = tempArr && tempArr[1];\n  const replaceText = `import ${prefix} from \"@/assets/images/${prefix}.png\"`;\n\n  currentEditor\n    .edit(editer => {\n      editer.replace(position, replaceText);\n    })\n    .then(() => {\n      const line = position.start.line;\n      const index = document.lineAt(line).firstNonWhitespaceCharacterIndex;\n\n      currentEditor.selection = new vscode.Selection(\n        new vscode.Position(line, replaceText.length + index),\n        new vscode.Position(line, replaceText.length + index)\n      );\n    });\n});\n\nexport default autoImp;\n","import * as vscode from 'vscode';\nconst fs = require('fs')\n\nconst dqs = // 定义出发的命令，要和package.json的一致\n  vscode.commands.registerCommand(\"dqs.sort\", () => {\n    // vs vode api\n    const currentEditor = vscode.window.activeTextEditor;\n    if (!currentEditor) {\n      return;\n    }\n\n    // 匹配 依赖引入的正则\n    const reg = /\\s*import\\s*(.+)\\s*from\\s*(.+)\\s*\\;*/g;\n    const { document } = currentEditor;\n    // 获取当前执行的文件路径\n    const currentlyOpenTabfilePath = document.fileName;\n    // 读取内容\n    let fileContentArr = fs.readFileSync(currentlyOpenTabfilePath, \"utf8\");\n    // newContent 是最后渲染的的内容 这里是匹配出所有的依赖句子\n    let newContent = fileContentArr.matchAll(reg);\n    // 统计一共有几句依赖，后续把依赖都替换成星号，然后再将星号替换成 newContent\n    let depLength = 0;\n    // 官方的 依赖数组  React、Vue等\n    let originDepArr = [];\n    // 自身的依赖数组  \"../../***\"\n    let selfDepArr = [];\n    // 自身最原始的依赖数组\n    let originSelfDepArr: any[] = [];\n    // 遍历匹配的内容\n    for (let i of newContent) {\n      depLength++;\n      // 判断是否是 官方的依赖\n      if (i[2].indexOf(\"/\") == -1 && i[2].indexOf(\".\") == -1) {\n        originDepArr.push({\n          dep: i[1],\n          from: i[2].replace(\"-\", \"\"),\n        });\n      } else {\n        originSelfDepArr.push({\n          dep: i[1],\n          from: i[2],\n        });\n        // 将除了字母以外的符号去掉，方便排序   {useEffect} => useEffect\n        selfDepArr.push({\n          dep: i[1].replace(/\\{|\\}|\\,/g, \"\"),\n          from: i[2],\n        });\n      }\n    }\n\n    // 单词排序\n    function alphabeticSorting(params: any, key: any) {\n      return params.sort((a: any, b: any) => {\n        let x = a[key],\n          y = b[key];\n        return x > y ? 1 : x < y ? -1 : 0;\n      });\n    }\n\n    const originDepArr2 = alphabeticSorting(originDepArr, \"dep\");\n    const selfDepArr2 = alphabeticSorting(selfDepArr, \"dep\");\n    // 获取排序后的依赖顺序\n    const selfDepKeys = selfDepArr2.map((item: any) => item.from);\n    // 最后要渲染的依赖数组\n    const renderArr = [];\n\n    // 对官方的依赖进行排序  如果是 React等 就放在最前面\n    for (let i = originDepArr2.length - 1; i >= 0; i--) {\n      const from = originDepArr2[i].from;\n      if (/vue|react|angular/gi.test(from)) {\n        renderArr.unshift(originDepArr2[i]);\n      } else {\n        renderArr.push(originDepArr2[i]);\n      }\n    }\n\n    // 对自己的依赖进行排序\n    selfDepKeys.map((key: any) => {\n      originSelfDepArr.map(item => {\n        if (item.from === key) {\n          renderArr.push(item);\n        }\n      });\n    });\n\n    // 最后的依赖顺序\n    let str = ``;\n\n    // 拼接字符串\n    renderArr.map((item, index) => {\n      const str3 =\n        index == renderArr.length - 1\n          ? `\\n import ${item.dep} from ${item.from} \\n`\n          : `\\n import ${item.dep} from ${item.from}`;\n      str += str3;\n    });\n\n    // 将本身的语句全部替换为星号\n    newContent = fileContentArr.replace(reg, \"*\");\n\n    //统计星号 再将星号替换成 最后的字符串\n    let replaceStr = \"\";\n    for (let i = 0; i < depLength; i++) {\n      replaceStr += \"*\";\n    }\n    newContent = newContent.replace(replaceStr, str);\n\n    // 渲染\n    fs.writeFileSync(currentlyOpenTabfilePath, newContent);\n    \n  });\n\nexport default dqs;\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport sort from './code/sort.ext';\nimport imp from './code/autoImp.ext';\n\n\nexport function activate(context: vscode.ExtensionContext) {\n  context.subscriptions.push(sort);\n  context.subscriptions.push(imp);\n}\n\nexport function deactivate() {}\n"],"names":["autoImp","vscode","commands","registerCommand","currentEditor","window","activeTextEditor","reg","selection","document","position","getWordRangeAtPosition","anchor","showInformationMessage","docText","getText","tempArr","exec","prefix","replaceText","edit","editer","replace","then","line","start","index","lineAt","firstNonWhitespaceCharacterIndex","Selection","Position","length","fs","dqs","currentlyOpenTabfilePath","fileName","fileContentArr","readFileSync","newContent","matchAll","depLength","originDepArr","selfDepArr","originSelfDepArr","i","indexOf","push","dep","from","alphabeticSorting","params","key","sort","a","b","x","y","originDepArr2","selfDepKeys","map","item","renderArr","test","unshift","str","str3","replaceStr","writeFileSync","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","context","subscriptions"],"sourceRoot":""}